        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:11
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 9142 returned 100% blocks executed 85%
        -:    8:int compare(const void* a, const void* b) {
     9142:    9:    if (*(int*)a > *(int*)b)
branch  0 taken 0
branch  1 taken 9142
    #####:   10:    return 1;
     9142:   11:    if (*(int*)a < *(int*)b)
branch  0 taken 3265
branch  1 taken 5877
     3265:   12:    return -1;
     5877:   13:    return 0;
     9142:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
        -:   16:struct gameState* newGame() {
    #####:   17:    struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:    return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:                  int k8, int k9, int k10) {
    #####:   23:    int* k = malloc(10 * sizeof(int));
    #####:   24:    k[0] = k1;
    #####:   25:    k[1] = k2;
    #####:   26:    k[2] = k3;
    #####:   27:    k[3] = k4;
    #####:   28:    k[4] = k5;
    #####:   29:    k[5] = k6;
    #####:   30:    k[6] = k7;
    #####:   31:    k[7] = k8;
    #####:   32:    k[8] = k9;
    #####:   33:    k[9] = k10;
    #####:   34:    return k;
        -:   35:}
        -:   36:
function initializeGame called 213 returned 100% blocks executed 91%
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:                   struct gameState *state) {
        -:   39:    
        -:   40:    int i;
        -:   41:    int j;
        -:   42:    int it;			
        -:   43:    //set up random number generator
      213:   44:    SelectStream(1);
      213:   45:    PutSeed((long)randomSeed);
        -:   46:    
        -:   47:    //check number of players
      426:   48:    if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 213
branch  1 taken 0
branch  2 taken 3
branch  3 taken 210
        -:   49:    {
        3:   50:        return -1;
        -:   51:    }
        -:   52:    
        -:   53:    //set number of players
      210:   54:    state->numPlayers = numPlayers;
        -:   55:    
        -:   56:    //check selected kingdom cards are different
     4620:   57:    for (i = 0; i < 10; i++)
branch  0 taken 2100
branch  1 taken 210
        -:   58:    {
    46200:   59:        for (j = 0; j < 10; j++)
branch  0 taken 21000
branch  1 taken 2100
        -:   60:        {
    39900:   61:            if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 18900
branch  1 taken 2100
branch  2 taken 0
branch  3 taken 18900
        -:   62:            {
    #####:   63:                return -1;
        -:   64:            }
    21000:   65:        }
     2100:   66:    }
        -:   67:    
        -:   68:    
        -:   69:    //initialize supply
        -:   70:    ///////////////////////////////
        -:   71:    
        -:   72:    //set number of Curse cards
      210:   73:    if (numPlayers == 2)
branch  0 taken 72
branch  1 taken 138
        -:   74:    {
       72:   75:        state->supplyCount[curse] = 10;
       72:   76:    }
      138:   77:    else if (numPlayers == 3)
branch  0 taken 43
branch  1 taken 95
        -:   78:    {
       43:   79:        state->supplyCount[curse] = 20;
       43:   80:    }
        -:   81:    else
        -:   82:    {
       95:   83:        state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:    
        -:   86:    //set number of Victory cards
      210:   87:    if (numPlayers == 2)
branch  0 taken 72
branch  1 taken 138
        -:   88:    {
       72:   89:        state->supplyCount[estate] = 8;
       72:   90:        state->supplyCount[duchy] = 8;
       72:   91:        state->supplyCount[province] = 8;
       72:   92:    }
        -:   93:    else
        -:   94:    {
      138:   95:        state->supplyCount[estate] = 12;
      138:   96:        state->supplyCount[duchy] = 12;
      138:   97:        state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:    
        -:  100:    //set number of Treasure cards
      210:  101:    state->supplyCount[copper] = 60 - (7 * numPlayers);
      210:  102:    state->supplyCount[silver] = 40;
      210:  103:    state->supplyCount[gold] = 30;
        -:  104:    
        -:  105:    //set number of Kingdom cards
     8820:  106:    for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 4200
branch  1 taken 210
        -:  107:    {
    71400:  108:        for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 33390
branch  1 taken 2310
        -:  109:        {
    33390:  110:            if (kingdomCards[j] == i)
branch  0 taken 1890
branch  1 taken 31500
        -:  111:            {
        -:  112:                //check if card is a 'Victory' Kingdom card
     3780:  113:                if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 1890
branch  1 taken 0
branch  2 taken 0
branch  3 taken 1890
        -:  114:                {
    #####:  115:                    if (numPlayers == 2){ 
branch  0 never executed
branch  1 never executed
    #####:  116:                        state->supplyCount[i] = 8; 
    #####:  117:                    }
    #####:  118:                    else{ state->supplyCount[i] = 12; }
    #####:  119:                }
        -:  120:                else
        -:  121:                {
     1890:  122:                    state->supplyCount[i] = 10;
        -:  123:                }
     1890:  124:                break;
        -:  125:            }
        -:  126:            else    //card is not in the set choosen for the game
        -:  127:            {
    31500:  128:                state->supplyCount[i] = -1;
        -:  129:            }
    31500:  130:        }
        -:  131:        
     4200:  132:    }
        -:  133:    
        -:  134:    ////////////////////////
        -:  135:    //supply intilization complete
        -:  136:    
        -:  137:    //set player decks
     1726:  138:    for (i = 0; i < numPlayers; i++)
branch  0 taken 653
branch  1 taken 210
        -:  139:    {
      653:  140:        state->deckCount[i] = 0;
     5224:  141:        for (j = 0; j < 3; j++)
branch  0 taken 1959
branch  1 taken 653
        -:  142:        {
     1959:  143:            state->deck[i][j] = estate;
     1959:  144:            state->deckCount[i]++;
     1959:  145:        }
    10448:  146:        for (j = 3; j < 10; j++)
branch  0 taken 4571
branch  1 taken 653
        -:  147:        {
     4571:  148:            state->deck[i][j] = copper;
     4571:  149:            state->deckCount[i]++;		
     4571:  150:        }
      653:  151:    }
        -:  152:    
        -:  153:    //shuffle player decks
     1726:  154:    for (i = 0; i < numPlayers; i++)
branch  0 taken 653
branch  1 taken 210
        -:  155:    {
      653:  156:        if ( shuffle(i, state) < 0 )
branch  0 taken 0
branch  1 taken 653
        -:  157:        {
    #####:  158:            return -1;
        -:  159:        }
      653:  160:    }
        -:  161:    
        -:  162:    //draw player hands
     1726:  163:    for (i = 0; i < numPlayers; i++)
branch  0 taken 653
branch  1 taken 210
        -:  164:    {  
        -:  165:        //initialize hand size to zero
      653:  166:        state->handCount[i] = 0;
      653:  167:        state->discardCount[i] = 0;
        -:  168:        //draw 5 cards
        -:  169:        // for (j = 0; j < 5; j++)
        -:  170:        //	{
        -:  171:        //	  drawCard(i, state);
        -:  172:        //	}
      653:  173:    }
        -:  174:    
        -:  175:    //set embargo tokens to 0 for all supply piles
    11760:  176:    for (i = 0; i <= treasure_map; i++)
branch  0 taken 5670
branch  1 taken 210
        -:  177:    {
     5670:  178:        state->embargoTokens[i] = 0;
     5670:  179:    }
        -:  180:    
        -:  181:    //initialize first player's turn
      210:  182:    state->outpostPlayed = 0;
      210:  183:    state->phase = 0;
      210:  184:    state->numActions = 1;
      210:  185:    state->numBuys = 1;
      210:  186:    state->playedCardCount = 0;
      210:  187:    state->whoseTurn = 0;
      210:  188:    state->handCount[state->whoseTurn] = 0;
        -:  189:    //int it; move to top
        -:  190:    
        -:  191:    //Moved draw cards to here, only drawing at the start of a turn
     2520:  192:    for (it = 0; it < 5; it++){
branch  0 taken 1050
branch  1 taken 210
     1050:  193:        drawCard(state->whoseTurn, state);
     1050:  194:    }
        -:  195:    
      210:  196:    updateCoins(state->whoseTurn, state, 0);
        -:  197:    
      210:  198:    return 0;
      213:  199:}
        -:  200:
function shuffle called 853 returned 100% blocks executed 100%
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202:    
        -:  203:    
        -:  204:    int newDeck[MAX_DECK];
      853:  205:    int newDeckPos = 0;
        -:  206:    int card;
        -:  207:    int i;
        -:  208:    
      853:  209:    if (state->deckCount[player] < 1)
branch  0 taken 200
branch  1 taken 653
      200:  210:    return -1;
      653:  211:    qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:    /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:    
    14366:  214:    while (state->deckCount[player] > 0) {
branch  0 taken 6530
branch  1 taken 653
     6530:  215:        card = floor(Random() * state->deckCount[player]);
     6530:  216:        newDeck[newDeckPos] = state->deck[player][card];
     6530:  217:        newDeckPos++;
    43264:  218:        for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 15102
branch  1 taken 6530
    15102:  219:            state->deck[player][i] = state->deck[player][i+1];
    15102:  220:        }
     6530:  221:        state->deckCount[player]--;
        -:  222:    }
    14366:  223:    for (i = 0; i < newDeckPos; i++) {
branch  0 taken 6530
branch  1 taken 653
     6530:  224:        state->deck[player][i] = newDeck[i];
     6530:  225:        state->deckCount[player]++;
     6530:  226:    }
        -:  227:    
      653:  228:    return 0;
      853:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:    int card;
    #####:  234:    int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:    
        -:  236:    //check if it is the right phase
    #####:  237:    if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:        return -1;
        -:  240:    }
        -:  241:    
        -:  242:    //check if player has enough actions
    #####:  243:    if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:        return -1;
        -:  246:    }
        -:  247:    
        -:  248:    //get card played
    #####:  249:    card = handCard(handPos, state);
        -:  250:    
        -:  251:    //check if selected card is an action
    #####:  252:    if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:        return -1;
        -:  255:    }
        -:  256:    
        -:  257:    //play card
    #####:  258:    if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
branch  0 never executed
branch  1 never executed
        -:  259:    {
    #####:  260:        return -1;
        -:  261:    }
        -:  262:    
        -:  263:    //reduce number of actions
    #####:  264:    state->numActions--;
        -:  265:    
        -:  266:    //update coins (Treasure cards may be added with card draws)
    #####:  267:    updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:    
    #####:  269:    return 0;
    #####:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:    int who;
        -:  274:    if (DEBUG){
        -:  275:        printf("Entering buyCard...\n");
        -:  276:    }
        -:  277:    
        -:  278:    // I don't know what to do about the phase thing.
        -:  279:    
    #####:  280:    who = state->whoseTurn;
        -:  281:    
    #####:  282:    if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:        if (DEBUG)
        -:  284:        printf("You do not have any buys left\n");
    #####:  285:        return -1;
    #####:  286:    } else if (supplyCount(supplyPos, state) <1){
branch  0 never executed
branch  1 never executed
        -:  287:        if (DEBUG)
        -:  288:        printf("There are not any of that type of card left\n");
    #####:  289:        return -1;
    #####:  290:    } else if (state->coins < getCost(supplyPos)){
branch  0 never executed
branch  1 never executed
        -:  291:        if (DEBUG) 
        -:  292:        printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:        return -1;
        -:  294:    } else {
    #####:  295:        state->phase=1;
        -:  296:        //state->supplyCount[supplyPos]--;
    #####:  297:        gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:        
    #####:  299:        state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:        state->numBuys--;
        -:  301:        if (DEBUG)
        -:  302:        printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:    }
        -:  304:    
        -:  305:    //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:    //state->discardCount[who]++;
        -:  307:    
    #####:  308:    return 0;
    #####:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
        -:  311:int numHandCards(struct gameState *state) {
    #####:  312:    return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
        -:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:    int currentPlayer = whoseTurn(state);
    #####:  317:    return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 10 returned 100% blocks executed 100%
        -:  320:int supplyCount(int card, struct gameState *state) {
       10:  321:    return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 1 returned 100% blocks executed 70%
        -:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:    int i;
        1:  326:    int count = 0;
        -:  327:    
        2:  328:    for (i = 0; i < state->deckCount[player]; i++)
branch  0 taken 0
branch  1 taken 1
        -:  329:    {
    #####:  330:        if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  331:    }
        -:  332:    
        8:  333:    for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 3
branch  1 taken 1
        -:  334:    {
        3:  335:        if (state->hand[player][i] == card) count++;
branch  0 taken 0
branch  1 taken 3
        3:  336:    }
        -:  337:    
        8:  338:    for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 3
branch  1 taken 1
        -:  339:    {
        3:  340:        if (state->discard[player][i] == card) count++;
branch  0 taken 0
branch  1 taken 3
        3:  341:    }
        -:  342:    
        1:  343:    return count;
        -:  344:}
        -:  345:
function whoseTurn called 422 returned 100% blocks executed 100%
        -:  346:int whoseTurn(struct gameState *state) {
      422:  347:    return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 1 returned 100% blocks executed 76%
        -:  350:int endTurn(struct gameState *state) {
        -:  351:    int k;
        -:  352:    int i;
        1:  353:    int currentPlayer = whoseTurn(state);
        -:  354:    
        -:  355:    //Discard hand
        2:  356:    for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 taken 0
branch  1 taken 1
    #####:  357:        state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:        state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  359:    }
        1:  360:    state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:    //Code for determining the player
        1:  363:    if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 taken 0
branch  1 taken 1
    #####:  364:        state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  365:    }
        -:  366:    else{
        1:  367:        state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:    }
        -:  369:    
        1:  370:    state->outpostPlayed = 0;
        1:  371:    state->phase = 0;
        1:  372:    state->numActions = 1;
        1:  373:    state->coins = 0;
        1:  374:    state->numBuys = 1;
        1:  375:    state->playedCardCount = 0;
        1:  376:    state->handCount[state->whoseTurn] = 0;
        -:  377:    
        -:  378:    //int k; move to top
        -:  379:    //Next player draws hand
       12:  380:    for (k = 0; k < 5; k++){
branch  0 taken 5
branch  1 taken 1
        5:  381:        drawCard(state->whoseTurn, state);//Draw a card
        5:  382:    }
        -:  383:    
        -:  384:    //Update money
        1:  385:    updateCoins(state->whoseTurn, state , 0);
        -:  386:    
        1:  387:    return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
        -:  390:int isGameOver(struct gameState *state) {
        -:  391:    int i;
        -:  392:    int j;
        -:  393:    
        -:  394:    //if stack of Province cards is empty, the game ends
    #####:  395:    if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:        return 1;
        -:  398:    }
        -:  399:    
        -:  400:    //if three supply pile are at 0, the game ends
    #####:  401:    j = 0;
    #####:  402:    for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:        if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:        {
    #####:  406:            j++;
    #####:  407:        }
    #####:  408:    }
    #####:  409:    if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:        return 1;
        -:  412:    }
        -:  413:    
    #####:  414:    return 0;
    #####:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
        -:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:    
        -:  419:    int i;
    #####:  420:    int score = 0;
        -:  421:    //score from hand
    #####:  422:    for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:        if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:        if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:        if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:        if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:        if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:        if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  430:    }
        -:  431:    
        -:  432:    //score from discard
    #####:  433:    for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:        if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:        if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:        if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:        if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:        if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:        if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  441:    }
        -:  442:    
        -:  443:    //score from deck
    #####:  444:    for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:        if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:        if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:        if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:        if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:        if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:        if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  452:    }
        -:  453:    
    #####:  454:    return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
        -:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:    int i;	
        -:  459:    int j;
        -:  460:    int highScore;
        -:  461:    int currentPlayer;
        -:  462:    
        -:  463:    //get score for each player
    #####:  464:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:        //set unused player scores to -9999
    #####:  467:        if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:        {
    #####:  469:            players[i] = -9999;
    #####:  470:        }
        -:  471:        else
        -:  472:        {
    #####:  473:            players[i] = scoreFor (i, state);
        -:  474:        }
    #####:  475:    }
        -:  476:    
        -:  477:    //find highest score
    #####:  478:    j = 0;
    #####:  479:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:        if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:        {
    #####:  483:            j = i;
    #####:  484:        }
    #####:  485:    }
    #####:  486:    highScore = players[j];
        -:  487:    
        -:  488:    //add 1 to players who had less turns
    #####:  489:    currentPlayer = whoseTurn(state);
    #####:  490:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:        if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:        {
    #####:  494:            players[i]++;
    #####:  495:        }
    #####:  496:    }
        -:  497:    
        -:  498:    //find new highest score
    #####:  499:    j = 0;
    #####:  500:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:        if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:        {
    #####:  504:            j = i;
    #####:  505:        }
    #####:  506:    }
    #####:  507:    highScore = players[j];
        -:  508:    
        -:  509:    //set winners in array to 1 and rest to 0
    #####:  510:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:        if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:        {
    #####:  514:            players[i] = 1;
    #####:  515:        }
        -:  516:        else
        -:  517:        {
    #####:  518:            players[i] = 0;
        -:  519:        }
    #####:  520:    }
        -:  521:    
    #####:  522:    return 0;
        -:  523:}
        -:  524:
function drawCard called 4774 returned 100% blocks executed 75%
        -:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:    int deckCounter;
     4774:  528:    if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 102
branch  1 taken 4672
        -:  529:        
        -:  530:        //Step 1 Shuffle the discard pile back into a deck
        -:  531:        int i;
        -:  532:        //Move discard to deck
      204:  533:        for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 0
branch  1 taken 102
    #####:  534:            state->deck[player][i] = state->discard[player][i];
    #####:  535:            state->discard[player][i] = -1;
    #####:  536:        }
        -:  537:        
      102:  538:        state->deckCount[player] = state->discardCount[player];
      102:  539:        state->discardCount[player] = 0;//Reset discard
        -:  540:        
        -:  541:        //Shufffle the deck
      102:  542:        shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:        
        -:  544:        if (DEBUG){//Debug statements
        -:  545:            printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:        }
        -:  547:        
      102:  548:        state->discardCount[player] = 0;
        -:  549:        
        -:  550:        //Step 2 Draw Card
      102:  551:        count = state->handCount[player];//Get current player's hand count
        -:  552:        
        -:  553:        if (DEBUG){//Debug statements
        -:  554:            printf("Current hand count: %d\n", count);
        -:  555:        }
        -:  556:        
      102:  557:        deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:        
      102:  559:        if (deckCounter == 0)
branch  0 taken 102
branch  1 taken 0
      102:  560:        return -1;
        -:  561:        
    #####:  562:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:        state->deckCount[player]--;
    #####:  564:        state->handCount[player]++;//Increment hand count
    #####:  565:    }
        -:  566:    
        -:  567:    else{
     4672:  568:        int count = state->handCount[player];//Get current hand count for player
        -:  569:        int deckCounter;
        -:  570:        if (DEBUG){//Debug statements
        -:  571:            printf("Current hand count: %d\n", count);
        -:  572:        }
        -:  573:        
     4672:  574:        deckCounter = state->deckCount[player];//Create holder for the deck count
     4672:  575:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     4672:  576:        state->deckCount[player]--;
     4672:  577:        state->handCount[player]++;//Increment hand count
        -:  578:    }
        -:  579:    
     4672:  580:    return 0;
     4774:  581:}
        -:  582:
function getCost called 28 returned 100% blocks executed 100%
        -:  583:int getCost(int cardNumber)
        -:  584:{
       28:  585:    switch( cardNumber ) 
branch  0 taken 1
branch  1 taken 1
branch  2 taken 1
branch  3 taken 1
branch  4 taken 1
branch  5 taken 1
branch  6 taken 1
branch  7 taken 1
branch  8 taken 1
branch  9 taken 1
branch 10 taken 1
branch 11 taken 1
branch 12 taken 1
branch 13 taken 1
branch 14 taken 1
branch 15 taken 1
branch 16 taken 1
branch 17 taken 1
branch 18 taken 1
branch 19 taken 1
branch 20 taken 1
branch 21 taken 1
branch 22 taken 1
branch 23 taken 1
branch 24 taken 1
branch 25 taken 1
branch 26 taken 1
branch 27 taken 1
        -:  586:    {
        -:  587:        case curse:
        1:  588:        return 0;
        -:  589:        case estate:
        1:  590:        return 2;
        -:  591:        case duchy:
        1:  592:        return 5;
        -:  593:        case province:
        1:  594:        return 8;
        -:  595:        case copper:
        1:  596:        return 0;
        -:  597:        case silver:
        1:  598:        return 3;
        -:  599:        case gold:
        1:  600:        return 6;
        -:  601:        case adventurer:
        1:  602:        return 6;
        -:  603:        case council_room:
        1:  604:        return 5;
        -:  605:        case feast:
        1:  606:        return 4;
        -:  607:        case gardens:
        1:  608:        return 4;
        -:  609:        case mine:
        1:  610:        return 5;
        -:  611:        case remodel:
        1:  612:        return 4;
        -:  613:        case smithy:
        1:  614:        return 4;
        -:  615:        case village:
        1:  616:        return 3;
        -:  617:        case baron:
        1:  618:        return 4;
        -:  619:        case great_hall:
        1:  620:        return 3;
        -:  621:        case minion:
        1:  622:        return 5;
        -:  623:        case steward:
        1:  624:        return 3;
        -:  625:        case tribute:
        1:  626:        return 5;
        -:  627:        case ambassador:
        1:  628:        return 3;
        -:  629:        case cutpurse:
        1:  630:        return 4;
        -:  631:        case embargo: 
        1:  632:        return 2;
        -:  633:        case outpost:
        1:  634:        return 5;
        -:  635:        case salvager:
        1:  636:        return 4;
        -:  637:        case sea_hag:
        1:  638:        return 4;
        -:  639:        case treasure_map:
        1:  640:        return 4;
        -:  641:    }
        -:  642:    
        1:  643:    return -1;
       28:  644:}
        -:  645:
function cardEffectAdventurer called 101 returned 100% blocks executed 100%
        -:  646:int cardEffectAdventurer(struct gameState *state) 
        -:  647:{
      101:  648:    int currentPlayer = whoseTurn(state);
      101:  649:    int drawntreasure=0;
        -:  650:	int cardDrawn;
        -:  651:	int temphand[MAX_HAND];// moved above the if statement
      101:  652:    int z = 0;// this is the counter for the temp hand
        -:  653:
        -:  654:
     6832:  655:	while(drawntreasure<2){
branch  0 taken 3315
branch  1 taken 101
     3315:  656:		if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 98
branch  1 taken 3217
       98:  657:			shuffle(currentPlayer, state);
       98:  658:		}
     3315:  659:		drawCard(currentPlayer, state);
     3315:  660:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  661:		
        -:  662:		// correct behavior...
        -:  663:// 		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold) 
     3315:  664: 		if (cardDrawn == copper)
branch  0 taken 202
branch  1 taken 3113
      202:  665:			drawntreasure++;
        -:  666:		else{
     3113:  667:			temphand[z]=cardDrawn;
     3113:  668:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
     3113:  669:			z++;
        -:  670:		}
        -:  671:	}
     6428:  672:	while(z-1>=0){
branch  0 taken 3113
branch  1 taken 101
     3113:  673:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
     3113:  674:		z=z-1;
        -:  675:	}
      101:  676:	return 0;
        -:  677:}
        -:  678:
function cardEffectSmithy called 101 returned 100% blocks executed 100%
        -:  679:int cardEffectSmithy(struct gameState * state, int handPos) 
        -:  680:{
        -:  681:	int i;
      101:  682:    int currentPlayer = whoseTurn(state);
        -:  683:
        -:  684:	//+3 Cards
        -:  685:	// BUG: draws 4 not 3 cards
     1010:  686:	for (i = 0; i < 4; i++)
branch  0 taken 404
branch  1 taken 101
        -:  687:	{
      404:  688:		drawCard(currentPlayer, state);
      404:  689:	}
        -:  690:	
        -:  691:	//discard card from hand
      101:  692:	discardCard(handPos, currentPlayer, state, 0);
      101:  693:	return 0;	
        -:  694:}
        -:  695:
function cardEffectGreatHall called 0 returned 0% blocks executed 0%
        -:  696:int cardEffectGreatHall(struct gameState * state, int handPos) {
    #####:  697:    int currentPlayer = whoseTurn(state);
        -:  698:
        -:  699:	//+1 Card
    #####:  700:	drawCard(currentPlayer, state);
        -:  701:
        -:  702:	//+1 Actions
        -:  703:// 	state->numActions++;
        -:  704:
        -:  705:	// BUG: Number of actions doesn't increase.
        -:  706:
        -:  707:	//discard card from hand
    #####:  708:	discardCard(handPos, currentPlayer, state, 0);
    #####:  709:	return 0;
        -:  710:}
        -:  711:
function cardEffectVillage called 0 returned 0% blocks executed 0%
        -:  712:int cardEffectVillage(struct gameState * state, int handPos)
        -:  713:{
    #####:  714:    int currentPlayer = whoseTurn(state);
        -:  715:
        -:  716:	//+1 Card
    #####:  717:	drawCard(currentPlayer, state);
        -:  718:
        -:  719:	//+2 Actions
    #####:  720:	state->numActions = state->numActions + 2;
        -:  721:
        -:  722:	//discard played card from hand
    #####:  723:	discardCard(handPos, currentPlayer, state, 0);
    #####:  724:	return 0;
        -:  725:}
        -:  726:
function cardEffectSeaHag called 0 returned 0% blocks executed 0%
        -:  727:int cardEffectSeaHag(struct gameState * state, int handPos)
        -:  728:{
    #####:  729:	int i = 0;
    #####:  730:	for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
        -:  731:// 		if (i != currentPlayer){
        -:  732:// 		}
    #####:  733:		state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####:  734:		state->deckCount[i]--;
    #####:  735:		state->discardCount[i]++;
    #####:  736:		state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -:  737:
    #####:  738:	}
    #####:  739:	return 0;		
        -:  740:}
        -:  741:
        -:  742:
function cardEffect called 215 returned 100% blocks executed 3%
        -:  743:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  744:{
        -:  745:    int i;
        -:  746:    int j;
        -:  747:    int k;
        -:  748:    int x;
        -:  749:    int index;
      215:  750:    int currentPlayer = whoseTurn(state);
      215:  751:    int nextPlayer = currentPlayer + 1;
        -:  752:    
      215:  753:    int tributeRevealedCards[2] = {-1, -1};
        -:  754:    int temphand[MAX_HAND];// moved above the if statement
      215:  755:    if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 5
branch  1 taken 210
        5:  756:        nextPlayer = 0;
        5:  757:    }
        -:  758:    
        -:  759:    //uses switch to select card and perform actions
      215:  760:    switch( card ) 
branch  0 taken 101
branch  1 taken 0
branch  2 taken 0
branch  3 taken 12
branch  4 taken 0
branch  5 taken 0
branch  6 taken 101
branch  7 taken 0
branch  8 taken 0
branch  9 taken 0
branch 10 taken 0
branch 11 taken 0
branch 12 taken 0
branch 13 taken 0
branch 14 taken 0
branch 15 taken 0
branch 16 taken 1
branch 17 taken 0
branch 18 taken 0
branch 19 taken 0
branch 20 taken 0
        -:  761:    {
        -:  762:        case adventurer:
      101:  763:        	return cardEffectAdventurer(state);
        -:  764:        case council_room:
        -:  765:			//+4 Cards
    #####:  766:			for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  767:			{
    #####:  768:				drawCard(currentPlayer, state);
    #####:  769:			}
        -:  770:		
        -:  771:			//+1 Buy
    #####:  772:			state->numBuys++;
        -:  773:		
        -:  774:			//Each other player draws a card
    #####:  775:			for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  776:			{
    #####:  777:				if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  778:				{
    #####:  779:					drawCard(i, state);
    #####:  780:				}
    #####:  781:			}
        -:  782:		
        -:  783:			//put played card in played card pile
    #####:  784:			discardCard(handPos, currentPlayer, state, 0);
        -:  785:		
    #####:  786:			return 0;
        -:  787:        case feast:
        -:  788:			//gain card with cost up to 5
        -:  789:			//Backup hand
    #####:  790:			for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  791:				temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  792:				state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  793:			}
        -:  794:			//Backup hand
        -:  795:		
        -:  796:			//Update Coins for Buy
    #####:  797:			updateCoins(currentPlayer, state, 5);
    #####:  798:			x = 1;//Condition to loop on
    #####:  799:			while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  800:				if (supplyCount(choice1, state) <= 0){
branch  0 never executed
branch  1 never executed
        -:  801:					if (DEBUG)
        -:  802:					printf("None of that card left, sorry!\n");
        -:  803:				
        -:  804:					if (DEBUG){
        -:  805:						printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  806:					}
    #####:  807:				}
    #####:  808:				else if (state->coins < getCost(choice1)){
branch  0 never executed
branch  1 never executed
    #####:  809:					printf("That card is too expensive!\n");
        -:  810:				
        -:  811:					if (DEBUG){
        -:  812:						printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  813:					}
    #####:  814:				}
        -:  815:				else{
        -:  816:				
        -:  817:					if (DEBUG){
        -:  818:						printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  819:					}
        -:  820:				
    #####:  821:					gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  822:					x = 0;//No more buying cards
        -:  823:				
        -:  824:					if (DEBUG){
        -:  825:						printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  826:					}
        -:  827:				
        -:  828:				}
        -:  829:			}     
        -:  830:		
        -:  831:			//Reset Hand
    #####:  832:			for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  833:				state->hand[currentPlayer][i] = temphand[i];
    #####:  834:				temphand[i] = -1;
    #####:  835:			}
        -:  836:			//Reset Hand
        -:  837:		
    #####:  838:			return 0;
        -:  839:		
        -:  840:        case gardens:
       12:  841:			return -1;
        -:  842:        
        -:  843:        case mine:
    #####:  844:			j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  845:		
    #####:  846:			if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  847:			{
    #####:  848:				return -1;
        -:  849:			}
        -:  850:		
    #####:  851:			if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  852:			{
    #####:  853:				return -1;
        -:  854:			}
        -:  855:		
    #####:  856:			if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  857:			{
    #####:  858:				return -1;
        -:  859:			}
        -:  860:		
    #####:  861:			gainCard(choice2, state, 2, currentPlayer);
        -:  862:		
        -:  863:			//discard card from hand
    #####:  864:			discardCard(handPos, currentPlayer, state, 0);
        -:  865:		
        -:  866:			//discard trashed card
    #####:  867:			for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  868:			{
    #####:  869:				if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  870:				{
    #####:  871:					discardCard(i, currentPlayer, state, 0);			
    #####:  872:					break;
        -:  873:				}
    #####:  874:			}
        -:  875:		
    #####:  876:			return 0;
        -:  877:        
        -:  878:        case remodel:
    #####:  879:			j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  880:		
    #####:  881:			if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  882:			{
    #####:  883:				return -1;
        -:  884:			}
        -:  885:		
    #####:  886:			gainCard(choice2, state, 0, currentPlayer);
        -:  887:		
        -:  888:			//discard card from hand
    #####:  889:			discardCard(handPos, currentPlayer, state, 0);
        -:  890:		
        -:  891:			//discard trashed card
    #####:  892:			for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  893:			{
    #####:  894:				if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  895:				{
    #####:  896:					discardCard(i, currentPlayer, state, 0);			
    #####:  897:					break;
        -:  898:				}
    #####:  899:			}
        -:  900:		
        -:  901:		
    #####:  902:			return 0;
        -:  903:		
        -:  904:        case smithy:
      101:  905:        	return cardEffectSmithy(state, handPos);
        -:  906:        case village:
    #####:  907:			return cardEffectVillage(state, handPos);
        -:  908:		case baron:
    #####:  909:			state->numBuys++;//Increase buys by 1!
    #####:  910:			if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  911:				int p = 0;//Iterator for hand!
    #####:  912:				int card_not_discarded = 1;//Flag for discard set!
    #####:  913:				while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  914:					if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  915:						state->coins += 4;//Add 4 coins to the amount of coins
    #####:  916:						state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  917:						state->discardCount[currentPlayer]++;
    #####:  918:						for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  919:							state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  920:						}
    #####:  921:						state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  922:						state->handCount[currentPlayer]--;
    #####:  923:						card_not_discarded = 0;//Exit the loop
    #####:  924:					}
    #####:  925:					else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  926:						if(DEBUG) {
        -:  927:							printf("No estate cards in your hand, invalid choice\n");
        -:  928:							printf("Must gain an estate if there are any\n");
        -:  929:						}
    #####:  930:						if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  931:							gainCard(estate, state, 0, currentPlayer);
    #####:  932:							state->supplyCount[estate]--;//Decrement estates
    #####:  933:							if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  934:								isGameOver(state);
    #####:  935:							}
    #####:  936:						}
    #####:  937:						card_not_discarded = 0;//Exit the loop
    #####:  938:					}
        -:  939:				
        -:  940:					else{
    #####:  941:						p++;//Next card
        -:  942:					}
        -:  943:				}
    #####:  944:			}
        -:  945:		
        -:  946:			else{
    #####:  947:				if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  948:					gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  949:					state->supplyCount[estate]--;//Decrement Estates
    #####:  950:					if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  951:						isGameOver(state);
    #####:  952:					}
    #####:  953:				}
        -:  954:			}
        -:  955:		
        -:  956:		
    #####:  957:			return 0;
        -:  958:		
        -:  959:        case great_hall:
    #####:  960:	        return cardEffectGreatHall(state, handPos);
        -:  961:	        		
        -:  962:        case minion:
        -:  963:			//+1 action
    #####:  964:			state->numActions++;
        -:  965:		
        -:  966:			//discard card from hand
    #####:  967:			discardCard(handPos, currentPlayer, state, 0);
        -:  968:		
    #####:  969:			if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  970:			{
    #####:  971:				state->coins = state->coins + 2;
    #####:  972:			}
        -:  973:		
    #####:  974:			else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  975:			{
        -:  976:				//discard hand
    #####:  977:				while(numHandCards(state) > 0)
branch  0 never executed
branch  1 never executed
        -:  978:				{
    #####:  979:					discardCard(handPos, currentPlayer, state, 0);
        -:  980:				}
        -:  981:			
        -:  982:				//draw 4
    #####:  983:				for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  984:				{
    #####:  985:					drawCard(currentPlayer, state);
    #####:  986:				}
        -:  987:			
        -:  988:				//other players discard hand and redraw if hand size > 4
    #####:  989:				for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  990:				{
    #####:  991:					if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  992:					{
    #####:  993:						if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  994:						{
        -:  995:							//discard hand
    #####:  996:							while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  997:							{
    #####:  998:								discardCard(handPos, i, state, 0);
        -:  999:							}
        -: 1000:						
        -: 1001:							//draw 4
    #####: 1002:							for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1003:							{
    #####: 1004:								drawCard(i, state);
    #####: 1005:							}
    #####: 1006:						}
    #####: 1007:					}
    #####: 1008:				}
        -: 1009:			
    #####: 1010:			}
    #####: 1011:			return 0;
        -: 1012:		
        -: 1013:        case steward:
    #####: 1014:			if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1015:			{
        -: 1016:				//+2 cards
    #####: 1017:				drawCard(currentPlayer, state);
    #####: 1018:				drawCard(currentPlayer, state);
    #####: 1019:			}
    #####: 1020:			else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1021:			{
        -: 1022:				//+2 coins
    #####: 1023:				state->coins = state->coins + 2;
    #####: 1024:			}
        -: 1025:			else
        -: 1026:			{
        -: 1027:				//trash 2 cards in hand
    #####: 1028:				discardCard(choice2, currentPlayer, state, 1);
    #####: 1029:				discardCard(choice3, currentPlayer, state, 1);
        -: 1030:			}
        -: 1031:		
        -: 1032:			//discard card from hand
    #####: 1033:			discardCard(handPos, currentPlayer, state, 0);
    #####: 1034:			return 0;
        -: 1035:		
        -: 1036:        case tribute:
    #####: 1037:			if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1038:				if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1039:					tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1040:					state->deckCount[nextPlayer]--;
    #####: 1041:				}
    #####: 1042:				else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1043:					tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1044:					state->discardCount[nextPlayer]--;
    #####: 1045:				}
        -: 1046:				else{
        -: 1047:					//No Card to Reveal
        -: 1048:					if (DEBUG){
        -: 1049:						printf("No cards to reveal\n");
        -: 1050:					}
        -: 1051:				}
    #####: 1052:			}
        -: 1053:		
        -: 1054:			else{
    #####: 1055:				if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1056:					for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1057:						state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1058:						state->deckCount[nextPlayer]++;
    #####: 1059:						state->discard[nextPlayer][i] = -1;
    #####: 1060:						state->discardCount[nextPlayer]--;
    #####: 1061:					}
        -: 1062:				
    #####: 1063:					shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1064:				} 
    #####: 1065:				tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1066:				state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1067:				state->deckCount[nextPlayer]--;
    #####: 1068:				tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1069:				state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1070:				state->deckCount[nextPlayer]--;
        -: 1071:			}    
        -: 1072:		
    #####: 1073:			if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1074:				state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1075:				state->playedCardCount++;
    #####: 1076:				tributeRevealedCards[1] = -1;
    #####: 1077:			}
        -: 1078:		
    #####: 1079:			for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1080:				if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1081:					state->coins += 2;
    #####: 1082:				}
        -: 1083:			
    #####: 1084:				else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1085:					drawCard(currentPlayer, state);
    #####: 1086:					drawCard(currentPlayer, state);
    #####: 1087:				}
        -: 1088:				else{//Action Card
    #####: 1089:					state->numActions = state->numActions + 2;
        -: 1090:				}
    #####: 1091:			}
        -: 1092:		
    #####: 1093:			return 0;
        -: 1094:		
        -: 1095:        case ambassador:
    #####: 1096:			j = 0;		//used to check if player has enough cards to discard
        -: 1097:		
    #####: 1098:			if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1099:			{
    #####: 1100:				return -1;				
        -: 1101:			}
        -: 1102:		
    #####: 1103:			if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1104:			{
    #####: 1105:				return -1;
        -: 1106:			}
        -: 1107:		
    #####: 1108:			for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1109:			{
    #####: 1110:				if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1111:				{
    #####: 1112:					j++;
    #####: 1113:				}
    #####: 1114:			}
    #####: 1115:			if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1116:			{
    #####: 1117:				return -1;				
        -: 1118:			}
        -: 1119:		
        -: 1120:			if (DEBUG) 
        -: 1121:			printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1122:		
        -: 1123:			//increase supply count for choosen card by amount being discarded
    #####: 1124:			state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1125:		
        -: 1126:			//each other player gains a copy of revealed card
    #####: 1127:			for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1128:			{
    #####: 1129:				if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1130:				{
    #####: 1131:					gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1132:				}
    #####: 1133:			}
        -: 1134:		
        -: 1135:			//discard played card from hand
    #####: 1136:			discardCard(handPos, currentPlayer, state, 0);			
        -: 1137:		
        -: 1138:			//trash copies of cards returned to supply
    #####: 1139:			for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1140:			{
    #####: 1141:				for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1142:				{
    #####: 1143:					if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1144:					{
    #####: 1145:						discardCard(i, currentPlayer, state, 1);
    #####: 1146:						break;
        -: 1147:					}
    #####: 1148:				}
    #####: 1149:			}			
        -: 1150:		
    #####: 1151:			return 0;
        -: 1152:		
        -: 1153:        case cutpurse:
        -: 1154:		
    #####: 1155:			updateCoins(currentPlayer, state, 2);
    #####: 1156:			for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1157:			{
    #####: 1158:				if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1159:				{
    #####: 1160:					for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1161:					{
    #####: 1162:						if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1163:						{
    #####: 1164:							discardCard(j, i, state, 0);
    #####: 1165:							break;
        -: 1166:						}
    #####: 1167:						if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1168:						{
    #####: 1169:							for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1170:							{
        -: 1171:								if (DEBUG)
        -: 1172:								printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1173:							}	
    #####: 1174:							break;
        -: 1175:						}		
    #####: 1176:					}
        -: 1177:				
    #####: 1178:				}
        -: 1179:			
    #####: 1180:			}				
        -: 1181:		
        -: 1182:			//discard played card from hand
    #####: 1183:			discardCard(handPos, currentPlayer, state, 0);			
        -: 1184:		
    #####: 1185:			return 0;
        -: 1186:		
        -: 1187:		
        -: 1188:        case embargo: 
        -: 1189:			//+2 Coins
    #####: 1190:			state->coins = state->coins + 2;
        -: 1191:		
        -: 1192:			//see if selected pile is in play
    #####: 1193:			if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1194:			{
    #####: 1195:				return -1;
        -: 1196:			}
        -: 1197:		
        -: 1198:			//add embargo token to selected supply pile
    #####: 1199:			state->embargoTokens[choice1]++;
        -: 1200:		
        -: 1201:			//trash card
    #####: 1202:			discardCard(handPos, currentPlayer, state, 1);		
    #####: 1203:			return 0;
        -: 1204:		
        -: 1205:        case outpost:
        -: 1206:			//set outpost flag
        1: 1207:			state->outpostPlayed++;
        -: 1208:		
        -: 1209:			//discard card
        1: 1210:			discardCard(handPos, currentPlayer, state, 0);
        1: 1211:			return 0;
        -: 1212:		
        -: 1213:        case salvager:
        -: 1214:			//+1 buy
    #####: 1215:			state->numBuys++;
        -: 1216:		
    #####: 1217:			if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1218:			{
        -: 1219:				//gain coins equal to trashed card
    #####: 1220:				state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1221:				//trash card
    #####: 1222:				discardCard(choice1, currentPlayer, state, 1);	
    #####: 1223:			}
        -: 1224:		
        -: 1225:			//discard card
    #####: 1226:			discardCard(handPos, currentPlayer, state, 0);
    #####: 1227:			return 0;
        -: 1228:		
        -: 1229:        case sea_hag:
    #####: 1230:        	return cardEffectSeaHag(state, handPos);
        -: 1231:        case treasure_map:
        -: 1232:			//search hand for another treasure_map
    #####: 1233:			index = -1;
    #####: 1234:			for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1235:			{
    #####: 1236:				if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1237:				{
    #####: 1238:					index = i;
    #####: 1239:					break;
        -: 1240:				}
    #####: 1241:			}
    #####: 1242:			if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1243:			{
        -: 1244:				//trash both treasure cards
    #####: 1245:				discardCard(handPos, currentPlayer, state, 1);
    #####: 1246:				discardCard(index, currentPlayer, state, 1);
        -: 1247:			
        -: 1248:				//gain 4 Gold cards
    #####: 1249:				for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1250:				{
    #####: 1251:					gainCard(gold, state, 1, currentPlayer);
    #####: 1252:				}
        -: 1253:			
        -: 1254:				//return success
    #####: 1255:				return 1;
        -: 1256:			}
        -: 1257:		
        -: 1258:			//no second treasure_map found in hand
    #####: 1259:			return -1;
        -: 1260:    }
        -: 1261:    
    #####: 1262:    return -1;
      215: 1263:}
        -: 1264:
function discardCard called 102 returned 100% blocks executed 80%
        -: 1265:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1266:{
        -: 1267:    
        -: 1268:    //if card is not trashed, added to Played pile 
      102: 1269:    if (trashFlag < 1)
branch  0 taken 102
branch  1 taken 0
        -: 1270:    {
        -: 1271:        //add card to played pile
      102: 1272:        state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
      102: 1273:        state->playedCardCount++;
      102: 1274:    }
        -: 1275:    
        -: 1276:    //set played card to -1
      102: 1277:    state->hand[currentPlayer][handPos] = -1;
        -: 1278:    
        -: 1279:    //remove card from player's hand
      102: 1280:    if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0
branch  1 taken 102
        -: 1281:    {
        -: 1282:        //reduce number of cards in hand
    #####: 1283:        state->handCount[currentPlayer]--;
    #####: 1284:    }
      102: 1285:    else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0
branch  1 taken 102
        -: 1286:    {
        -: 1287:        //reduce number of cards in hand
    #####: 1288:        state->handCount[currentPlayer]--;
    #####: 1289:    }
        -: 1290:    else 	
        -: 1291:    {
        -: 1292:        //replace discarded card with last card in hand
      102: 1293:        state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1294:        //set last card to -1
      102: 1295:        state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1296:        //reduce number of cards in hand
      102: 1297:        state->handCount[currentPlayer]--;
        -: 1298:    }
        -: 1299:    
      102: 1300:    return 0;
        -: 1301:}
        -: 1302:
function gainCard called 0 returned 0% blocks executed 0%
        -: 1303:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1304:{
        -: 1305:    //Note: supplyPos is enum of choosen card
        -: 1306:    
        -: 1307:    //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1308:    if ( supplyCount(supplyPos, state) < 1 )
branch  0 never executed
branch  1 never executed
        -: 1309:    {
    #####: 1310:        return -1;
        -: 1311:    }
        -: 1312:    
        -: 1313:    //added card for [whoseTurn] current player:
        -: 1314:    // toFlag = 0 : add to discard
        -: 1315:    // toFlag = 1 : add to deck
        -: 1316:    // toFlag = 2 : add to hand
        -: 1317:    
    #####: 1318:    if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1319:    {
    #####: 1320:        state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1321:        state->deckCount[player]++;
    #####: 1322:    }
    #####: 1323:    else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1324:    {
    #####: 1325:        state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1326:        state->handCount[player]++;
    #####: 1327:    }
        -: 1328:    else
        -: 1329:    {
    #####: 1330:        state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1331:        state->discardCount[player]++;
        -: 1332:    }
        -: 1333:    
        -: 1334:    //decrease number in supply pile
    #####: 1335:    state->supplyCount[supplyPos]--;
        -: 1336:    
    #####: 1337:    return 0;
    #####: 1338:}
        -: 1339:
function updateCoins called 218 returned 100% blocks executed 100%
        -: 1340:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1341:{
        -: 1342:    int i;
        -: 1343:    
        -: 1344:    //reset coin count
      218: 1345:    state->coins = 0;
        -: 1346:    
        -: 1347:    //add coins for each Treasure card in player's hand
     2616: 1348:    for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 1090
branch  1 taken 218
        -: 1349:    {
     1090: 1350:        if (state->hand[player][i] == copper)
branch  0 taken 854
branch  1 taken 236
        -: 1351:        {
      854: 1352:            state->coins += 1;
      854: 1353:        }
      236: 1354:        else if (state->hand[player][i] == silver)
branch  0 taken 12
branch  1 taken 224
        -: 1355:        {
       12: 1356:            state->coins += 2;
       12: 1357:        }
      224: 1358:        else if (state->hand[player][i] == gold)
branch  0 taken 7
branch  1 taken 217
        -: 1359:        {
        7: 1360:            state->coins += 3;
        7: 1361:        }	
     1090: 1362:    }	
        -: 1363:    
        -: 1364:    //add bonus
      218: 1365:    state->coins += bonus;
        -: 1366:    
      218: 1367:    return 0;
        -: 1368:}
        -: 1369:
        -: 1370:
        -: 1371://end of dominion.c
        -: 1372:
